// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model AllowedServer {
    id                      String  @id @default(cuid())
    serverIp                String
    discordServerId         String
    pterodactylIdentifier   String
    userServers             UserServer[]
}

model UserServer {
    id                  String  @id @default(cuid())
    userId              String
    user                User @relation(fields: [userId], references: [id], onDelete: Cascade)
    serverId            String
    server              AllowedServer @relation(fields: [serverId], references: [id], onDelete: Cascade)

    @@unique([userId, serverId])
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    User
    Admin
}

model User {
    id            String    @id @default(cuid())
    role          UserRole  @default(User)
    name          String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    javaName      String?
    bedrockName   String?
    userServers   UserServer[]
    funnySubmits  RandomFunny[]
}

model RandomFunny {
    id                    String    @id @default(cuid())
    funnyText             String
    submittedByUserId     String
    submittedByUser       User @relation(fields: [submittedByUserId], references: [id], onDelete: Cascade)
}